/** @license React v16.6.1
 * react-cache.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';
(function(k, m) {
  'object' === typeof exports && 'undefined' !== typeof module
    ? m(exports, require('react'), require('scheduler'))
    : 'function' === typeof define && define.amd
      ? define(['exports', 'react', 'scheduler'], m)
      : m((k.ReactCache = {}), k.React, k.Scheduler);
})(this, function(k, m, u) {
  function q(c, e) {
    var f = v.current;
    if (null === f)
      throw Error(
        "react-cache: read and preload may only be called from within a component's render. They are not supported in event handlers or lifecycle methods."
      );
    return f.readContext(c, e);
  }
  function w(c) {
    return c;
  }
  function r(c, e, f, g) {
    var a = n.get(c);
    void 0 === a && ((a = new Map()), n.set(c, a));
    var l = a.get(g);
    if (void 0 === l) {
      e = e(f);
      e.then(
        function(a) {
          if (0 === h.status) {
            var b = h;
            b.status = 1;
            b.value = a;
          }
        },
        function(a) {
          if (0 === h.status) {
            var b = h;
            b.status = 2;
            b.value = a;
          }
        }
      );
      var h = { status: 0, value: e };
      c = p.add(h, x.bind(null, c, g));
      a.set(g, c);
      return h;
    }
    return p.access(l);
  }
  function x(c, e) {
    var f = n.get(c);
    void 0 !== f && (f.delete(e), 0 === f.size && n.delete(c));
  }
  var v =
      m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
        .ReactCurrentDispatcher,
    p = (function(c) {
      function e() {
        !1 === h && l > g && ((h = !0), u.unstable_scheduleCallback(f));
      }
      function f() {
        h = !1;
        var b = g;
        if (null !== a)
          for (var d = a.previous; l > b && null !== d; ) {
            var c = d.onDelete,
              e = d.previous;
            d.onDelete = null;
            d.previous = d.next = null;
            d === a
              ? (a = d = null)
              : ((a.previous = e), (e.next = a), (d = e));
            --l;
            c();
          }
      }
      var g = c,
        a = null,
        l = 0,
        h = !1;
      return {
        add: function(b, d) {
          b = { value: b, onDelete: d, next: null, previous: null };
          null === a
            ? (b.previous = b.next = b)
            : ((d = a.previous),
              (d.next = b),
              (b.previous = d),
              (a.previous = b),
              (b.next = a));
          a = b;
          l += 1;
          return b;
        },
        update: function(a, d) {
          a.value = d;
        },
        access: function(b) {
          var d = b.next;
          if (null !== d) {
            var c = a;
            if (a !== b) {
              var f = b.previous;
              f.next = d;
              d.previous = f;
              d = c.previous;
              d.next = b;
              b.previous = d;
              c.previous = b;
              b.next = c;
              a = b;
            }
          }
          e();
          return b.value;
        },
        setLimit: function(a) {
          g = a;
          e();
        },
      };
    })(500),
    n = new Map(),
    t = m.createContext(null);
  k.unstable_createResource = function(c, e) {
    var f = void 0 !== e ? e : w,
      g = {
        read: function(a) {
          q(t);
          var e = f(a);
          a = r(g, c, a, e);
          switch (a.status) {
            case 0:
              throw a.value;
            case 1:
              return a.value;
            case 2:
              throw a.value;
          }
        },
        preload: function(a) {
          q(t);
          var e = f(a);
          r(g, c, a, e);
        },
      };
    return g;
  };
  k.unstable_setGlobalCacheLimit = function(c) {
    p.setLimit(c);
  };
  Object.defineProperty(k, '__esModule', { value: !0 });
});
